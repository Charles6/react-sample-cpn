{"version":3,"sources":["components/DateTime.js","components/Weather.js","utils/selectFields.js","components/hnApi.js","components/Story.js","components/NewFeed.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["DateTime","useState","day","setDay","date","setDate","time","setTime","days","months","setInterval","d","Date","minutes","getMinutes","toString","padStart","hours","getHours","getDay","getDate","getMonth","getFullYear","className","cx","id","Weather","temp","setTemp","type","setType","tempLo","setTempLo","tempHi","setTempHi","fetch","then","data","json","celsiusTemp","main","toFixed","weather","description","temp_min","temp_max","selectFields","by","url","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","result","getStoryIds","Story","story","setStory","useEffect","target","rel","href","unixTime","cHour","dateObj","getUTCDate","month","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","getUTCMinutes","convertTime","NewFeed","storyIds","setStoryIds","map","key","Links","label","link","linkInfo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.835d948a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport cx from 'classnames';\nimport '../components/DateTime.css';\n\nfunction DateTime() {\n  const [day, setDay] = useState();\n  const [date, setDate] = useState();\n  const [time, setTime] = useState();\n\n  const days = ['日','月','火','水','木','金','土'];\n  const months = ['一月','二月','三月','四月','五月','六月','七月','八月','九月','十月','十一月','十月'];\n\n  setInterval(function() {\n    let d = new Date();\n    let minutes = d.getMinutes().toString().padStart(2, '0');\n    let hours = d.getHours().toString().padStart(2, '0');\n\n    setDay(days[d.getDay()]);\n    setDate(d.getDate()+' '+months[d.getMonth()]+' '+d.getFullYear());\n    setTime(hours+':'+minutes);\n  }, 1000);\n\n\n    return (\n      <div className={cx('box', 'date-time-box')}>\n        <div id=\"day\">\n          {day}<br/>曜<br/>日\n        </div>\n        <div id=\"date\">\n          {date}\n        </div>\n        <div id=\"time\">\n          {time}\n        </div>\n      </div>\n    );\n  }\n  \n  export default DateTime;","import React, {useState} from 'react';\nimport cx from 'classnames';\n\nfunction Weather() {\n  const [temp, setTemp] = useState();\n  const [type, setType] = useState();\n  const [tempLo, setTempLo] = useState();\n  const [tempHi, setTempHi] = useState();\n\n  fetch(\"https://api.openweathermap.org/data/2.5/weather?zip=90046,us&APPID=33d0a0d0219bef1e831ca05c509cff49\")\n    .then(function(data) {\n      return data.json();\n    }).then(function(data) {\n      var celsiusTemp = (data.main.temp-273.15).toFixed(1);\n\n      setTemp(celsiusTemp);\n      setType(data.weather[0].description);\n      setTempLo((data.main.temp_min-273.15).toFixed(1));\n      setTempHi((data.main.temp_max-273.15).toFixed(1));\n    });\n\n\n    return (\n      <div className={cx('box', 'weather-box')}>\n        {type}\n        <div className=\"temp\">{temp} &deg;C</div>\n        low: {tempLo} &deg;C | high: {tempHi} &deg;C\n      </div>\n    );\n  }\n  \n  export default Weather;","export const selectFields = ({ id, by, url, time, title } = {}) => ({\n    id, by, url, time, title,\n});","import axios from 'axios';\n\nimport {selectFields} from '../utils/selectFields'\n\nexport const baseUrl = 'https://hacker-news.firebaseio.com/v0/';\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\nexport const storyUrl = `${baseUrl}item/`;\n\nexport const getStory = async (storyId) => {\n    const result = await axios.get(`${storyUrl + storyId}.json`)\n      .then(({data})=> data && selectFields(data))\n    return result;\n}\n\nexport const getStoryIds = async () => {\n  const result = await axios.get(newStoriesUrl)\n    .then(({ data }) => data);\n  return result;\n}","import React, {useEffect, useState} from 'react';\nimport cx from 'classnames';\n\nimport { getStory } from './hnApi';\n\n\nfunction Story({ storyId }) {\n    const [ story, setStory] = useState({});\n\n    useEffect(()=>{\n        getStory(storyId)\n            .then(data => data && data.url && setStory(data));\n    }, []);\n\n    const convertTime = (unixTime) => {\n        let currentTime = new Date();\n        let cHour = currentTime.getHours();\n\n        let dateObj = new Date(unixTime * 1000);\n        let date = dateObj.getUTCDate();\n        let month = dateObj.getUTCMonth(); \n        let year = dateObj.getUTCFullYear();\n        let hour = dateObj.getUTCHours();\n        let minutes = dateObj.getUTCMinutes();\n\n        let diff = hour - cHour;\n        let realHour = hour - diff;\n\n        let cleanDateTime = date + \"/\" + month + \"/\" + year + \" - \" +realHour.toString().padStart(2, '0') + ':' +  \n        minutes.toString().padStart(2, '0');\n\n        return cleanDateTime;\n    }\n\n  return story && story.url ? (\n      <div className={cx('story')}>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={story.url}>\n            {story.title}\n          </a>\n          {convertTime(story.time)} - {story.by}\n      </div>\n    ):\"\";\n  }\n  \n  export default Story;","import React, {useEffect, useState} from 'react';\nimport cx from 'classnames';\n\nimport { getStoryIds } from './hnApi';\nimport Story from '../components/Story'\n\nfunction NewFeed() {\n  const [storyIds, setStoryIds] = useState([]);\n\n  useEffect(() => {\n    getStoryIds().then(data => setStoryIds(data));\n  }, []);\n\n  return (\n      <div className={cx('box', 'news-box')}>\n        <h3><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://news.ycombinator.com/\">ハッカーニュース</a></h3>\n        <div className=\"new-stories\">\n          {storyIds.map(storyIds => (\n            <Story key={storyIds} storyId={storyIds}/>\n          ))}\n        </div>\n\n      </div>\n\n    );\n  }\n  \n  export default NewFeed;","import React, {useState} from 'react';\nimport cx from 'classnames';\n\nfunction Links() {\n  const [link, setLink] = useState([\n    {label:\"Github\",url:\"https://github.com/Charles6\"},\n    {label:\"MDN web docs\",url:\"https://developer.mozilla.org/en-US/\"},\n    {label:\"App libs list\",url:\"https://applibslist.xyz/\"},\n    {label:\"JSON placeholder\",url:\"https://jsonplaceholder.typicode.com/\"},\n    {label:\"unDraw\",url:\"https://undraw.co/illustrations\"},\n    {label:\"Codepen\",url:\"https://codepen.io/\"},\n    {label:\"epoch converter\",url:\"https://www.epochconverter.com/\"},\n    {label:\"CSS FX\",url:\"https://cssfx.dev/\"},\n    {label:\"HTML color codes\",url:\"http://htmlcolorcodes.com/\"}\n  ]);\n\n  return (\n    <div className={cx('box', 'link-box')}>\n      <h3>便利なリンク</h3>\n      { link.map(linkInfo => (\n        <a key={linkInfo.url} target=\"_blank\" rel=\"noopener noreferrer\" href={linkInfo.url}>{linkInfo.label}</a>\n      ))\n      }\n    </div>\n  );\n}\n\nexport default Links;","import React from 'react';\nimport './App.css';\nimport cx from 'classnames';\n\nimport DateTime from './components/DateTime';\nimport Weather from './components/Weather';\nimport NewFeed from './components/NewFeed';\nimport Links from './components/Links';\n\nfunction App() {\n  return (\n    <div className={cx(\"App\",)}>\n      <DateTime />\n      <Weather />\n      <NewFeed />\n      <Links />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}